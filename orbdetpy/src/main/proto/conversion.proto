/*
 * conversion.proto - Conversion service protocol definitions.
 * Copyright (C) 2019-2023 University of Texas
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";
option java_multiple_files = false;
option java_package = "org.astria.rpc";
option java_outer_classname = "ConversionRequest";

import "google/protobuf/wrappers.proto";
import "messages.proto";

service Conversion
{
    rpc transformFrame(TransformFrameInput) returns (Double2DArray) {}

    rpc transformFrameCov(TransformFrameInput) returns (Double2DArray) {}

    rpc convertAzElToRaDec(AnglesInput) returns (DoubleArray) {}

    rpc convertRaDecToAzEl(AnglesInput) returns (DoubleArray) {}

    rpc convertLLAToPos(TransformFrameInput) returns (Double2DArray) {}

    rpc convertPosToLLA(TransformFrameInput) returns (Double2DArray) {}

    rpc convertElemToPv(TransformFrameInput) returns (Double2DArray) {}

    rpc convertPvToElem(TransformFrameInput) returns (Double2DArray) {}

    rpc getUTCString(DoubleArray) returns (google.protobuf.StringValue) {}

    rpc getTTString(DoubleArray) returns (google.protobuf.StringValue) {}

    rpc getJ2000EpochOffset(google.protobuf.StringValue) returns (DoubleArray) {}

    rpc getMJDEpochOffset(google.protobuf.StringValue) returns (DoubleArray) {}

    rpc getUTCStringforMJD(DoubleArray) returns (google.protobuf.StringValue) {}

    rpc getEpochDifference(IntegerArray) returns (google.protobuf.DoubleValue) {}
}
